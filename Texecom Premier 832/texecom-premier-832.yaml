esphome:
  name: texecom-premier-832
  friendly_name: Texecom Premier 832

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  # Generate a strong key for encryption
  encryption:
    key: "1234567890"

ota:
  - platform: esphome
    # Recommend setting a strong OTA password
    password: "1234567890"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Texecom-Premier-832-Fallback"
    password: "1234567890" # Recommend setting a strong AP password

captive_portal:

# Enable Web Server for viewing status (optional)
web_server:
  port: 80

# Define the UART connection to the alarm panel
# Requires a TTL <-> Panel Level Shifter (e.g., MAX3232)
uart:
  id: uart_bus
  tx_pin: GPIO17 # ESP TX -> Level Shifter -> Panel RX
  rx_pin: GPIO16 # ESP RX <- Level Shifter <- Panel TX
  baud_rate: 19200
  data_bits: 8
  parity: NONE
  stop_bits: 2
  rx_buffer_size: 256 # Buffer for incoming serial data

globals:
  # Tracks if we have successfully authenticated with the panel
  - id: g_authenticated
    type: bool
    restore_value: no
    initial_value: 'false'
  # Tracks which command reply we are currently waiting for
  - id: g_last_command_sent
    type: int # 0=None, 1=Auth, 2=Zones, 3=Partitions
    restore_value: no
    initial_value: '0'
  # Timestamp of the last received byte from the panel (for timeout detection)
  - id: g_last_rx_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  # Buffer to store incoming serial data bytes
  - id: g_rx_buffer
    type: std::vector<uint8_t>
  # Panel UDL (User Download Lead) Password - Must match panel config
  - id: g_udl_password
    type: const char*
    initial_value: !secret texecom_udl_password # !!! SET YOUR PANEL'S UDL PASSWORD HERE !!!
  # Total number of zones configured on the panel
  - id: g_number_of_zones
    type: int
    initial_value: '24' # !!! SET THE NUMBER OF ZONES ON YOUR PANEL !!!
  # State variable to alternate polling between zones and partitions
  - id: g_poll_state
    type: int # 0 = Poll Zones next, 1 = Poll Partitions next
    restore_value: no
    initial_value: '0' # Start by polling zones

# Sensor to show high-level connection status
text_sensor:
  - platform: template
    id: panel_status
    name: "Panel Status"
    icon: "mdi:lan-connect"
    update_interval: 15s # Primarily updated by logic, interval provides fallback view
    lambda: |-
      if (id(g_authenticated)) {
        // Check if data received within timeout period (65s)
        if (millis() - id(g_last_rx_time) < 65000 && id(g_last_rx_time) != 0) {
           return {"Authenticated"};
        } else {
           ESP_LOGW("panel_status", "Panel status timeout detected (last RX: %lu ms ago).", (unsigned long)(millis() - id(g_last_rx_time)));
           return {"Timeout?"}; // Indicate potential loss of connection
        }
      } else if (id(g_last_command_sent) == 1) {
          return {"Authenticating..."}; // In the process of logging in
      } else {
        return {"Disconnected"}; // Not authenticated, not trying to auth
      }

  # Text sensors to display "Armed" / "Disarmed" for each partition
  - platform: template
    id: partition_1_status_text
    name: "Partition 1 Status" # Customize partition name (e.g., House Status)
    icon: "mdi:shield-home"
    update_interval: never # Updated by the partition_1_armed binary sensor's on_state trigger
    lambda: 'return {std::string(id(partition_1_armed).state ? "Armed" : "Disarmed")};'
    # Optional: Change icon based on state
    # icon_template: 'return id(partition_1_armed).state ? "mdi:shield-lock" : "mdi:shield-off";'

  - platform: template
    id: partition_2_status_text
    name: "Partition 2 Status" # Customize partition name (e.g., Garage Status)
    icon: "mdi:shield-home"
    update_interval: never
    lambda: 'return {std::string(id(partition_2_armed).state ? "Armed" : "Disarmed")};'
    # icon_template: 'return id(partition_2_armed).state ? "mdi:shield-lock" : "mdi:shield-off";'

  - platform: template
    id: partition_3_status_text
    name: "Partition 3 Status" # Customize partition name
    icon: "mdi:shield-home"
    update_interval: never
    lambda: 'return {std::string(id(partition_3_armed).state ? "Armed" : "Disarmed")};'
    # icon_template: 'return id(partition_3_armed).state ? "mdi:shield-lock" : "mdi:shield-off";'

  - platform: template
    id: partition_4_status_text
    name: "Partition 4 Status" # Customize partition name
    icon: "mdi:shield-home"
    update_interval: never
    lambda: 'return {std::string(id(partition_4_armed).state ? "Armed" : "Disarmed")};'
    # icon_template: 'return id(partition_4_armed).state ? "mdi:shield-lock" : "mdi:shield-off";'


# Binary Sensors for Zone status (Triggered / Healthy)
# Customize 'name' and 'device_class' for each zone based on its function
binary_sensor:
  - platform: template
    id: zone_1_triggered
    name: "Front Door"
    device_class: door
  - platform: template
    id: zone_2_triggered
    name: "Main Bedroom"
    device_class: motion
  - platform: template
    id: zone_3_triggered
    name: "Study"
    device_class: motion
  - platform: template
    id: zone_4_triggered
    name: "Passage"
    device_class: motion
  - platform: template
    id: zone_5_triggered
    name: "TV Room"
    device_class: motion
  - platform: template
    id: zone_6_triggered
    name: "Kitchen"
    device_class: motion
  - platform: template
    id: zone_7_triggered
    name: "Out Building"
    device_class: motion
  - platform: template
    id: zone_8_triggered
    name: "Flat"
    device_class: motion
  - platform: template
    id: zone_9_triggered
    name: "Lounge"
    device_class: motion
  - platform: template
    id: zone_10_triggered
    name: "Patio Beam"
    device_class: motion
  - platform: template
    id: zone_11_triggered
    name: "Lounge Beam"
    device_class: motion
  - platform: template
    id: zone_12_triggered
    name: "Main Bedroom Front Beam"
    device_class: motion
  - platform: template
    id: zone_13_triggered
    name: "Main Bedroom Back Beam"
    device_class: motion
  - platform: template
    id: zone_14_triggered
    name: "Flat Alley Beam"
    device_class: motion
  - platform: template
    id: zone_15_triggered
    name: "Kitchen Door"
    device_class: door
  - platform: template
    id: zone_16_triggered
    name: "Driveway Beam"
    device_class: motion
  - platform: template
    id: zone_17_triggered
    name: "Flat Front Beam"
    device_class: motion
  - platform: template
    id: zone_18_triggered
    name: "N/A Zone 18" # Indicate unused zone
    device_class: problem
    internal: true # Hide from Home Assistant by default
  - platform: template
    id: zone_19_triggered
    name: "Remote Panic" # Control or status?
    device_class: problem
    internal: true # Hide from Home Assistant by default
  - platform: template
    id: zone_20_triggered
    name: "Remote Front Beam" # Control or status?
    device_class: problem
    internal: true # Hide if this is just control feedback
  - platform: template
    id: zone_21_triggered
    name: "Remote House" # Control or status?
    device_class: problem
    internal: true # Hide if this is just control feedback
  - platform: template
    id: zone_22_triggered
    name: "N/A Zone 22" # Indicate unused zone
    device_class: problem
    internal: true # Hide from Home Assistant by default
  - platform: template
    id: zone_23_triggered
    name: "N/A Zone 23" # Indicate unused zone
    device_class: problem
    internal: true # Hide from Home Assistant by default
  - platform: template
    id: zone_24_triggered
    name: "N/A Zone 24" # Indicate unused zone
    device_class: problem
    internal: true # Hide from Home Assistant by default

  # Internal binary sensors holding the raw armed state (ON=Armed, OFF=Disarmed)
  # Used to drive the text sensors above. Marked internal=true to hide Locked/Unlocked states.
  - platform: template
    id: partition_1_armed
    name: "Partition 1 Armed State" # Internal name
    device_class: lock # Helps with potential automations based on ON/OFF
    internal: true # Hide this from HA UI by default
    on_state:
      then:
        - text_sensor.template.publish:
            id: partition_1_status_text
            state: !lambda 'return std::string(id(partition_1_armed).state ? "Armed" : "Disarmed");'

  - platform: template
    id: partition_2_armed
    name: "Partition 2 Armed State"
    device_class: lock
    internal: true
    on_state:
      then:
        - text_sensor.template.publish:
            id: partition_2_status_text
            state: !lambda 'return std::string(id(partition_2_armed).state ? "Armed" : "Disarmed");'

  - platform: template
    id: partition_3_armed
    name: "Partition 3 Armed State"
    device_class: lock
    internal: true
    on_state:
      then:
        - text_sensor.template.publish:
            id: partition_3_status_text
            state: !lambda 'return std::string(id(partition_3_armed).state ? "Armed" : "Disarmed");'

  - platform: template
    id: partition_4_armed
    name: "Partition 4 Armed State"
    device_class: lock
    internal: true
    on_state:
      then:
        - text_sensor.template.publish:
            id: partition_4_status_text
            state: !lambda 'return std::string(id(partition_4_armed).state ? "Armed" : "Disarmed");'

# Interval to trigger polling (sending commands)
interval:
  # Determines when to initiate the next polling action (approx every 5s)
  - interval: 5s
    id: trigger_poll_interval
    then:
      - script.execute: poll_panel

  # Fast interval (every 100ms) to read available UART data and parse replies
  - interval: 100ms
    id: read_parse_interval
    then:
      - lambda: |-
          // Check if any data is available from the UART buffer
          bool data_read_this_cycle = false;
          while (id(uart_bus).available()) {
            uint8_t byte;
            id(uart_bus).read_byte(&byte);
            // Log raw byte at DEBUG level for troubleshooting
            ESP_LOGD("parser_raw_rx", "Byte RX: 0x%02X (%c)", byte, byte > 31 && byte < 127 ? byte : '.');
            id(g_rx_buffer).push_back(byte); // Add byte to our processing buffer
            data_read_this_cycle = true;
          }

          // If we read any data, update the last received time (for timeout checks)
          if (data_read_this_cycle) {
            id(g_last_rx_time) = millis();
            ESP_LOGV("parser", "Finished reading this cycle. Buffer size: %d", id(g_rx_buffer).size());
          }

          // --- PARSING LOGIC ---
          // Only attempt to parse if the buffer actually contains data
          if (id(g_rx_buffer).empty()) return;

          bool processed_message = false;
          do { // Loop in case multiple messages are in the buffer
            processed_message = false;

            // Log current buffer state if we are expecting a reply (Verbose level)
            if (id(g_last_command_sent) != 0 && !id(g_rx_buffer).empty()) {
              std::string buf_hex = "";
              for(uint8_t b : id(g_rx_buffer)) { char hex[4]; sprintf(hex, "%02X ", b); buf_hex += hex; }
              ESP_LOGV("parser", "Parsing buffer (Expecting Cmd %d): %s", id(g_last_command_sent), buf_hex.c_str());
            }

            // --- Check for Authentication OK reply (Command 1) ---
            if (id(g_last_command_sent) == 1 && id(g_rx_buffer).size() >= 4) {
              bool is_ok = (id(g_rx_buffer)[0] == 'O' && id(g_rx_buffer)[1] == 'K' && id(g_rx_buffer)[2] == 0x0D && id(g_rx_buffer)[3] == 0x0A);
              ESP_LOGV("parser", "Checking for OK reply... Result: %s", is_ok ? "MATCH" : "NO MATCH");
              if (is_ok) {
                ESP_LOGI("parser", "Authentication successful (OK Received).");
                id(g_authenticated) = true;      // Set authenticated flag
                id(g_last_command_sent) = 0;     // Reset waiting state
                id(g_poll_state) = 0;            // Ensure we poll zones first after auth
                id(g_rx_buffer).erase(id(g_rx_buffer).begin(), id(g_rx_buffer).begin() + 4); // Remove OK CR LF from buffer
                processed_message = true;        // Mark that we processed a message
              }
            }

            // --- Check for Panel ERR0R reply (any expected command) ---
            if (!processed_message && id(g_last_command_sent) != 0 && id(g_rx_buffer).size() >= 7) {
              bool is_error = (id(g_rx_buffer)[0] == 'E' && id(g_rx_buffer)[1] == 'R' && id(g_rx_buffer)[2] == 'R' &&
                              id(g_rx_buffer)[3] == '0' && id(g_rx_buffer)[4] == 'R' && id(g_rx_buffer)[5] == 0x0D &&
                              id(g_rx_buffer)[6] == 0x0A);
              ESP_LOGV("parser", "Checking for ERR0R reply... Result: %s", is_error ? "MATCH" : "NO MATCH");
              if (is_error) {
                ESP_LOGE("parser", "Panel returned ERR0R. Check password and panel config.");
                id(g_authenticated) = false;     // Assume loss of authentication
                id(g_last_command_sent) = 0;     // Reset waiting state
                id(g_rx_buffer).erase(id(g_rx_buffer).begin(), id(g_rx_buffer).begin() + 7); // Remove ERR0R CR LF
                processed_message = true;
              }
            }

            // --- Check for Zone Status reply (Command 2) ---
            // Format: RB1 RB2 ... RBx CR LF
            if (!processed_message && id(g_last_command_sent) == 2) {
              int crlf_pos = -1; // Find the position of CR LF terminator
              for (size_t i = 0; (i + 1) < id(g_rx_buffer).size(); ++i) {
                if (id(g_rx_buffer)[i] == 0x0D && id(g_rx_buffer)[i+1] == 0x0A) {
                  crlf_pos = i;
                  break;
                }
              }
              ESP_LOGV("parser", "Checking for Zone reply (CRLF Pos: %d)", crlf_pos);

              // Check if CR LF was found and there's at least one data byte before it
              if (crlf_pos != -1 && crlf_pos > 0) {
                 int num_zone_bytes = crlf_pos; // Number of actual zone data bytes received
                 int expected_zones = id(g_number_of_zones); // Max zones we care about
                 if (expected_zones > 50) expected_zones = 50; // Protocol limit

                 // Sanity check: Panel shouldn't send more bytes than configured/requested
                 if (num_zone_bytes <= expected_zones) {
                    ESP_LOGD("parser", "Received %d zone status bytes.", num_zone_bytes);
                    // Process each received zone byte
                    for (int i = 0; i < num_zone_bytes; ++i) {
                      uint8_t zone_byte = id(g_rx_buffer)[i];
                      // Bits 0/1 determine status: 00=Healthy, 01=Alarm, 10=Tamper, 11=Shorted
                      // We consider anything other than 00 as 'triggered'
                      bool triggered = (zone_byte & 0b00000011) != 0;
                      int zone_num = i + 1;
                      esphome::binary_sensor::BinarySensor *zone_sensor = nullptr;

                      // Map index 'i' to the correct zone sensor ID
                      switch(zone_num) {
                        case 1: zone_sensor = id(zone_1_triggered); break;
                        case 2: zone_sensor = id(zone_2_triggered); break;
                        case 3: zone_sensor = id(zone_3_triggered); break;
                        case 4: zone_sensor = id(zone_4_triggered); break;
                        case 5: zone_sensor = id(zone_5_triggered); break;
                        case 6: zone_sensor = id(zone_6_triggered); break;
                        case 7: zone_sensor = id(zone_7_triggered); break;
                        case 8: zone_sensor = id(zone_8_triggered); break;
                        case 9: zone_sensor = id(zone_9_triggered); break;
                        case 10: zone_sensor = id(zone_10_triggered); break;
                        case 11: zone_sensor = id(zone_11_triggered); break;
                        case 12: zone_sensor = id(zone_12_triggered); break;
                        case 13: zone_sensor = id(zone_13_triggered); break;
                        case 14: zone_sensor = id(zone_14_triggered); break;
                        case 15: zone_sensor = id(zone_15_triggered); break;
                        case 16: zone_sensor = id(zone_16_triggered); break;
                        case 17: zone_sensor = id(zone_17_triggered); break;
                        case 18: zone_sensor = id(zone_18_triggered); break;
                        case 19: zone_sensor = id(zone_19_triggered); break;
                        case 20: zone_sensor = id(zone_20_triggered); break;
                        case 21: zone_sensor = id(zone_21_triggered); break;
                        case 22: zone_sensor = id(zone_22_triggered); break;
                        case 23: zone_sensor = id(zone_23_triggered); break;
                        case 24: zone_sensor = id(zone_24_triggered); break;
                        // Add cases for zones > 24 if needed
                        default: break;
                      }

                      // Update the corresponding sensor if it's defined in the YAML
                      if (zone_sensor != nullptr) {
                        ESP_LOGD("zone_update", "Zone %d Raw: 0x%02X, Triggered: %s -> Publishing", zone_num, zone_byte, triggered ? "true" : "false");
                        zone_sensor->publish_state(triggered);
                      } else if (zone_num <= expected_zones) {
                        // Warn if a sensor is expected but not defined
                        ESP_LOGW("parser", "Zone sensor for zone %d not found in config!", zone_num);
                      }
                    } // End loop through received zone bytes

                    // If panel sent fewer bytes than expected (e.g. only 8 zones on 16 zone request)
                    // set the remaining expected sensors to healthy (false)
                    for (int i = num_zone_bytes; i < expected_zones; ++i) {
                       int zone_num = i + 1;
                       esphome::binary_sensor::BinarySensor *zone_sensor = nullptr;
                       // Map index 'i' to the correct zone sensor ID (duplicated switch for clarity)
                       switch(zone_num) {
                        case 1: zone_sensor = id(zone_1_triggered); break;
                        case 2: zone_sensor = id(zone_2_triggered); break;
                        case 3: zone_sensor = id(zone_3_triggered); break;
                        case 4: zone_sensor = id(zone_4_triggered); break;
                        case 5: zone_sensor = id(zone_5_triggered); break;
                        case 6: zone_sensor = id(zone_6_triggered); break;
                        case 7: zone_sensor = id(zone_7_triggered); break;
                        case 8: zone_sensor = id(zone_8_triggered); break;
                        case 9: zone_sensor = id(zone_9_triggered); break;
                        case 10: zone_sensor = id(zone_10_triggered); break;
                        case 11: zone_sensor = id(zone_11_triggered); break;
                        case 12: zone_sensor = id(zone_12_triggered); break;
                        case 13: zone_sensor = id(zone_13_triggered); break;
                        case 14: zone_sensor = id(zone_14_triggered); break;
                        case 15: zone_sensor = id(zone_15_triggered); break;
                        case 16: zone_sensor = id(zone_16_triggered); break;
                        case 17: zone_sensor = id(zone_17_triggered); break;
                        case 18: zone_sensor = id(zone_18_triggered); break;
                        case 19: zone_sensor = id(zone_19_triggered); break;
                        case 20: zone_sensor = id(zone_20_triggered); break;
                        case 21: zone_sensor = id(zone_21_triggered); break;
                        case 22: zone_sensor = id(zone_22_triggered); break;
                        case 23: zone_sensor = id(zone_23_triggered); break;
                        case 24: zone_sensor = id(zone_24_triggered); break;
                        default: break;
                       }
                       // Update the sensor if it's defined
                       if (zone_sensor != nullptr) {
                           ESP_LOGD("zone_update", "Zone %d (Not Received): Assuming Healthy -> Publishing false", zone_num);
                           zone_sensor->publish_state(false);
                       }
                    } // End loop through remaining expected zones

                    // Successfully processed zone data
                    id(g_last_command_sent) = 0; // Reset waiting state
                    id(g_rx_buffer).erase(id(g_rx_buffer).begin(), id(g_rx_buffer).begin() + crlf_pos + 2); // Remove processed data + CR LF
                    processed_message = true;

                 } else { // Panel sent more bytes than expected (num_zone_bytes > expected_zones)
                    ESP_LOGW("parser", "Received unexpected number of zone bytes (%d, expected <= %d). Discarding.", num_zone_bytes, expected_zones);
                    id(g_last_command_sent) = 0; // Reset waiting state (discard invalid message)
                    id(g_rx_buffer).erase(id(g_rx_buffer).begin(), id(g_rx_buffer).begin() + crlf_pos + 2); // Remove bad data + CR LF
                    processed_message = true;
                 }
              } // End if CRLF found
            } // End processing for Zone reply (Cmd 2)

            // --- Check for Partition Status reply (Command 3) ---
            // Format: RB1 RB2 CR LF (RB1=Flag 16 byte, RB2=Flag 17 byte)
            if (!processed_message && id(g_last_command_sent) == 3 && id(g_rx_buffer).size() >= 4) {
              // Check for CR LF terminator after the 2 expected data bytes
              bool is_part_reply = (id(g_rx_buffer)[2] == 0x0D && id(g_rx_buffer)[3] == 0x0A);
              ESP_LOGV("parser", "Checking for Partition reply (2 bytes + CRLF)... Result: %s", is_part_reply ? "MATCH" : "NO MATCH");

              if (is_part_reply) {
                 uint8_t flag16_byte = id(g_rx_buffer)[0]; // Byte representing Flag 16 (Armed) status for partitions 1-4+
                 uint8_t flag17_byte = id(g_rx_buffer)[1]; // Byte representing Flag 17 (Stay Armed) status for partitions 1-4+
                 ESP_LOGD("parser", "Received partition status bytes: Flag16=0x%02X, Flag17=0x%02X", flag16_byte, flag17_byte);

                 // Extract individual partition armed states based on bits 0-3
                 // Bit 0 = Partition 1, Bit 1 = Partition 2, Bit 2 = Partition 3, Bit 3 = Partition 4
                 bool p1_full_armed = (flag16_byte & 0b00000001) != 0;
                 bool p2_full_armed = (flag16_byte & 0b00000010) != 0;
                 bool p3_full_armed = (flag16_byte & 0b00000100) != 0;
                 bool p4_full_armed = (flag16_byte & 0b00001000) != 0;

                 bool p1_stay_armed = (flag17_byte & 0b00000001) != 0;
                 bool p2_stay_armed = (flag17_byte & 0b00000010) != 0;
                 bool p3_stay_armed = (flag17_byte & 0b00000100) != 0;
                 bool p4_stay_armed = (flag17_byte & 0b00001000) != 0;

                 // Determine overall armed state (ON if either Full or Stay armed)
                 bool p1_armed = p1_full_armed || p1_stay_armed;
                 bool p2_armed = p2_full_armed || p2_stay_armed;
                 bool p3_armed = p3_full_armed || p3_stay_armed;
                 bool p4_armed = p4_full_armed || p4_stay_armed;

                 // Log and publish state for each partition's binary sensor
                 ESP_LOGD("partition_update", "P1 Armed: %s (Full:%s Stay:%s) -> Publishing", p1_armed ? "true" : "false", p1_full_armed ? "T" : "F", p1_stay_armed ? "T" : "F");
                 id(partition_1_armed).publish_state(p1_armed); // This triggers the text sensor update via on_state

                 ESP_LOGD("partition_update", "P2 Armed: %s (Full:%s Stay:%s) -> Publishing", p2_armed ? "true" : "false", p2_full_armed ? "T" : "F", p2_stay_armed ? "T" : "F");
                 id(partition_2_armed).publish_state(p2_armed);

                 ESP_LOGD("partition_update", "P3 Armed: %s (Full:%s Stay:%s) -> Publishing", p3_armed ? "true" : "false", p3_full_armed ? "T" : "F", p3_stay_armed ? "T" : "F");
                 id(partition_3_armed).publish_state(p3_armed);

                 ESP_LOGD("partition_update", "P4 Armed: %s (Full:%s Stay:%s) -> Publishing", p4_armed ? "true" : "false", p4_full_armed ? "T" : "F", p4_stay_armed ? "T" : "F");
                 id(partition_4_armed).publish_state(p4_armed);

                 // Mark command as processed and remove data from buffer (2 data + CR LF = 4 bytes)
                 id(g_last_command_sent) = 0;
                 id(g_rx_buffer).erase(id(g_rx_buffer).begin(), id(g_rx_buffer).begin() + 4);
                 processed_message = true;
              }
            } // End processing for Partition reply (Cmd 3)

            // --- Cleanup Buffer if data remains unparsed ---
            // If no message was processed in this iteration and buffer is large, clear it to prevent overflow/stale data
            if (!processed_message && !id(g_rx_buffer).empty() && id(g_rx_buffer).size() > 100) {
                ESP_LOGW("parser", "RX buffer contains unparsed data or is too large, clearing %d bytes.", id(g_rx_buffer).size());
                // Log content before clearing for debugging
                std::string buf_hex = "";
                for(uint8_t b : id(g_rx_buffer)) { char hex[4]; sprintf(hex, "%02X ", b); buf_hex += hex; }
                ESP_LOGW("parser", "Clearing buffer content: %s", buf_hex.c_str());
                id(g_rx_buffer).clear();
                // If we were waiting for a reply, reset the state as we missed it
                if (id(g_last_command_sent) != 0) {
                   ESP_LOGW("parser", "Resetting command state due to buffer clear.");
                   id(g_last_command_sent) = 0;
                   // Consider forcing re-authentication if buffer had to be cleared?
                   // id(g_authenticated) = false;
                }
            }

          } while (processed_message && !id(g_rx_buffer).empty()); // Continue loop if a message was processed and buffer still has data

# Scripts to handle communication logic
script:
  # Sends a byte vector command over UART
  - id: send_command
    mode: single
    parameters:
      command_bytes: std::vector<uint8_t>
    then:
      - lambda: |-
          if (!command_bytes.empty()) {
            // Log the hex representation of the command being sent (DEBUG level)
            std::string cmd_hex = "";
            for(uint8_t b : command_bytes) { char hex[4]; sprintf(hex, "%02X ", b); cmd_hex += hex; }
            ESP_LOGD("send_cmd", "Sending: %s", cmd_hex.c_str());
            // Use write_array for sending byte vectors
            id(uart_bus).write_array(command_bytes.data(), command_bytes.size());
          } else {
             ESP_LOGW("send_cmd", "Attempted to send empty command buffer!");
          }

  # Sends the authentication command (\W<password>/)
  - id: authenticate
    mode: single
    then:
      - lambda: |-
          // Optional: Log clear-text password (INFO level - USE WITH CAUTION)
          // const char* pwd_to_send = id(g_udl_password);
          // ESP_LOGI("auth_script", "Attempting authentication with UDL Password: '%s'", pwd_to_send);

          id(g_authenticated) = false;     // Reset authenticated status
          id(g_last_command_sent) = 1;     // Set state to waiting for auth reply
          std::vector<uint8_t> cmd;        // Build command vector
          cmd.push_back('\\');             // Start char
          cmd.push_back('W');              // Command 'W' (Request Access)
          const char* pwd = id(g_udl_password); // Get password from global
          for(int i = 0; pwd[i] != '\0'; ++i) { // Append password characters
             cmd.push_back(pwd[i]);
          }
          cmd.push_back('/');              // End char
          id(send_command).execute(cmd);   // Execute the send script

  # Sends the request for zone status (\Z<start_zone><count>/)
  - id: read_zones
    mode: single
    then:
      - lambda: |-
          ESP_LOGD("zones_script", "Requesting zone status...");
          id(g_last_command_sent) = 2;     // Set state to waiting for zone reply
          int num_zones = id(g_number_of_zones); // Get configured number of zones
          if (num_zones <= 0) return;      // Skip if no zones configured
          if (num_zones > 50) num_zones = 50; // Limit request to protocol max
          std::vector<uint8_t> cmd;        // Build command vector
          cmd.push_back('\\');             // Start char
          cmd.push_back('Z');              // Command 'Z' (Read Zones)
          cmd.push_back(0x00);             // Start Zone index 0 (Zone 1)
          cmd.push_back((uint8_t)num_zones); // Number of zones to read
          cmd.push_back('/');              // End char
          id(send_command).execute(cmd);   // Execute the send script

  # Sends the request for partition status flags (\P<start_flag><count>/)
  - id: read_partitions
    mode: single
    then:
      - lambda: |-
          ESP_LOGD("part_script", "Requesting partition status (Flags 16 & 17)...");
          id(g_last_command_sent) = 3;     // Set state to waiting for partition reply
          std::vector<uint8_t> cmd;        // Build command vector
          cmd.push_back('\\');             // Start char
          cmd.push_back('P');              // Command 'P' (Read Partition Flags)
          cmd.push_back(0x10);             // Start Flag 16 (0x10 = Armed Status)
          cmd.push_back(0x02);             // Read 2 flags (16 and 17)
          cmd.push_back('/');              // End char
          id(send_command).execute(cmd);   // Execute the send script

  # Main polling logic controller, runs approx every 5 seconds
  - id: poll_panel
    mode: queued # Ensure sequential execution, prevent overlap
    then:
      # 1. Check if currently authenticated state timed out (no data received recently)
      - lambda: |-
          unsigned long now = millis();
          // If authenticated but no data received for ~55 seconds, assume timeout
          if (id(g_authenticated) && (now - id(g_last_rx_time) > 55000) && id(g_last_rx_time) != 0) {
            ESP_LOGW("poll_panel", "Panel communication timeout (55s since last RX), forcing re-authentication.");
            id(g_authenticated) = false;     // Reset status
            id(g_last_command_sent) = 0;     // Reset waiting state
            id(g_poll_state) = 0;            // Reset poll sequence state
          }

      # 2. If not authenticated, try to authenticate
      - if:
          condition:
            lambda: 'return !id(g_authenticated);' # Check if NOT authenticated
          then:
            # Only send auth command if we are not *already* waiting for its reply
            - if:
                condition:
                  lambda: 'return id(g_last_command_sent) != 1;'
                then:
                  - script.execute: authenticate
                # If already waiting for auth reply, just log and do nothing else this cycle
                else:
                  - lambda: ESP_LOGD("poll_panel", "Still waiting for authentication reply...");

      # 3. If authenticated AND idle (not waiting for any reply), send the next command in sequence
      - if:
          condition:
            lambda: 'return id(g_authenticated) && id(g_last_command_sent) == 0;'
          then:
            # Alternate between polling zones (state 0) and partitions (state 1)
            - if:
                condition:
                  lambda: 'return id(g_poll_state) == 0;' # Time to poll zones
                then:
                  - script.execute: read_zones
                  - lambda: id(g_poll_state) = 1;   # Next time, poll partitions
                else: # Time to poll partitions (g_poll_state == 1)
                  - script.execute: read_partitions
                  - lambda: id(g_poll_state) = 0;   # Next time, poll zones

      # 4. If waiting for a reply (other than authentication), log the waiting state
      - if:
          condition:
            lambda: 'return id(g_last_command_sent) > 1;' # Waiting for Zone (2) or Partition (3) reply
          then:
            - lambda: ESP_LOGD("poll_panel", "Waiting for reply (Cmd %d)...", id(g_last_command_sent));
